Python Version = 3.12

pip install numpy (Version 1.26.4)

pip install --upgrade pip setuptools wheel // Might output alternative command for installation

pip install gymnasium

pip install torch

pip install numpy scipy

pip install cloudpickle six

pip install git+https://github.com/openai/gym.git

conda activate myenv

pip install gym

pip install stable-baselines3

pip install minigrid

pip install gym moviepy


# Be Aware, tensorboardX did not install using requirement.txt, double check!

#### UI 
pip install Werkzeug
python.exe -m pip install --upgrade pip
pip install Werkzeug
pip install click
pip install blinker
pip install itsdangerous


# extra installations were needed for scripts/visualize.py file
pip install torch_ac 
pip install tensorboardX


# Also, there was a need to change '.conda\Lib\site-packages\torch_ac\utils\penv.py' 
the updated file:

'''
import multiprocessing
import gymnasium as gym
import multiprocessing
import platform


if platform.system() == "Windows":
    try:
        multiprocessing.set_start_method("spawn", force=True)
    except RuntimeError:
        pass
else:
    try:
        multiprocessing.set_start_method("fork", force=True)
    except RuntimeError:
        pass
    
def worker(conn, env):
    while True:
        cmd, data = conn.recv()
        if cmd == "step":
            obs, reward, terminated, truncated, info = env.step(data)
            if terminated or truncated:
                obs, _ = env.reset()
            conn.send((obs, reward, terminated, truncated, info))
        elif cmd == "reset":
            obs, _ = env.reset()
            conn.send(obs)
        else:
            raise NotImplementedError

class ParallelEnv(gym.Env):
    """A concurrent execution of environments in multiple processes."""

    def __init__(self, envs):
        assert len(envs) >= 1, "No environment given."

        self.envs = envs
        self.observation_space = self.envs[0].observation_space
        self.action_space = self.envs[0].action_space

        self.locals = []
        for env in self.envs[1:]:
            local, remote = multiprocessing.Pipe()
            self.locals.append(local)
            p = multiprocessing.Process(target=worker, args=(remote, env))
            p.daemon = True
            p.start()
            remote.close()

    def reset(self):
        for local in self.locals:
            local.send(("reset", None))
        results = [self.envs[0].reset()[0]] + [local.recv() for local in self.locals]
        return results

    def step(self, actions):
        for local, action in zip(self.locals, actions[1:]):
            local.send(("step", action))
        obs, reward, terminated, truncated, info = self.envs[0].step(actions[0])
        if terminated or truncated:
            obs, _ = self.envs[0].reset()
        results = zip(*[(obs, reward, terminated, truncated, info)] + [local.recv() for local in self.locals])
        return results

    def render(self):
        raise NotImplementedError
'''

pip install array2gif

